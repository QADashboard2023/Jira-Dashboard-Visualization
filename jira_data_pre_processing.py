# -*- coding: utf-8 -*-
"""Jira Data Pre-Processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/166qg-r5ayg4i6blDyiaMUa1gwJ7lf4Pi

# New section
"""

import pandas as pd
import numpy as  np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly
import re

file = pd.read_csv("data.csv")

file.head()

stats = ['Assigned', 'Closed', 'New', 'READY FOR TEST', 'Rejected', 'Review In Progress']
filter = file[file['Status'].isin(stats)]
count = filter['Status'].value_counts()

for status, count in count.items():
    print(f"Number of '{status}' occurrences: {count}")

"""Check missing value"""

for column in file.columns:
    missing_count = file[column].isnull().sum()
    print(f"Column '{column}' has {missing_count} missing value(s)")

missing_counts = file.isnull().sum()

# Plot a histogram of missing values counts
plt.figure(figsize=(10, 6))
plt.bar(missing_counts.index, missing_counts.values, color='skyblue')
plt.xticks(rotation=90)
plt.xlabel('Columns')
plt.ylabel('Number of Missing Values')
plt.title('Histogram of Missing Values Counts')
plt.tight_layout()

plt.show()

"""Drop missing column where data is all NA"""

df = file.drop('Custom field (Environment)', axis=1)
df.head(5)

# fill in the NA values with TBD in all column
for col in df.columns:
  df[col].fillna("TBD", inplace = True)

# check if its any missing value
print(df.isnull().sum())

# df.to_csv("new.csv")

"""Rename column name and drop unrelated column"""

# drop Created, Updated, Assignee, Closed Date,
# Custom field (How It Happened? ( Root Cause)), Custom field (How I Fixed (Resolution Provided))
# Feel free to drop unnecessary columns
dropCol = [
    'Created', 'Updated', 'Assignee', 'Custom field (Closed Date)', 'Custom field (Implementation Planned End Date)', 'Custom field (Implementation Planned Start Date)',
    'Custom field (How It Happened? (Root Cause))', 'Custom field (How I Fixed (Resolution Provided))'
]

df.drop(dropCol, axis=1, inplace=True)

df.head(5)

# Rename Column name
newCol ={
    'Custom field (Test Type)' : 'Test Type',
    'Custom field (Feature Link)' : 'Feature Type',
    'Custom field (Defect Type)' : 'Defect Type'
}

df.rename(columns=newCol, inplace=True)
df.head(5)

df.to_csv("new.csv")

# Define a regular expression pattern to capture text within square brackets
pattern = r'\[(.*?)\]'

# Read the CSV file into a Pandas DataFrame
df = pd.read_csv('new.csv')

# Create a list to store the modified Summary column
modified_summary = []

# Iterate through the rows to modify the "Summary" column and add a new column
for index, row in df.iterrows():
    summary_text = row['Summary']

    # Find all matches of the pattern in the summary text
    matches = re.findall(pattern, summary_text)
    # If there are Quest Numbers, use the first one, else use 'TBD'
    if matches:
        parts = matches[0].split('/')
        if parts and parts[0].startswith('Q'):
            # Remove text after '|' character, if it exists
            quest = parts[0].split('|')[0]
            modified_summary.append(quest)
        else:
            modified_summary.append('TBD')
    else:
        modified_summary.append('TBD')

# Add the modified summary as a new column
df['Modified Summary'] = modified_summary

# Define the name of the new CSV file
new_csv_file = 'modified_new.csv'

# Save the DataFrame to a new CSV file
df.to_csv('modified_new.csv', index=False, encoding='utf-8')

print(f"Modified data saved to {new_csv_file}")